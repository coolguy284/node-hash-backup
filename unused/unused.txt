class FileRepeatableStreamGenerator {
  #fd;
  #disposed = false;
  
  async #initialize(filePath) {
    this.#fd = await open(filePath);
    
    return this;
  }
  
  constructor(filePath) {
    return this.#initialize(filePath);
  }
  
  async [Symbol.asyncDispose]() {
    if (this.#disposed) {
      throw new Error(`this is already disposed`);
    }
    
    this.#disposed = true;
    
    await this.#fd[Symbol.asyncDispose]();
  }
}

export async function createFileRepeatableStreamGenerator(filePath) {
  // the 'await' call does have an effect, as constructor returns a promise that gets
  // fulfilled with the newly constructed FileRepeatableStreamGenerator object
  return await new FileRepeatableStreamGenerator(filePath);
}
